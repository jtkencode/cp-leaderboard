#!/usr/bin/env python
# pylint: disable=invalid-name

"""This script scrapes Polban Codeforces leaderboard and outputs a JSON array
containing the parsed data."""

import json
from re import findall
import requests
from bs4 import BeautifulSoup


URL = "https://codeforces.com/ratings/organization/3732"


def is_active(cell):
    """is_active takes a BeautifulSoup object containing a <td> cell from
    Codeforces leaderboard and returns whether the user is still active or
    not."""
    return cell.find("span", title="outdated") is None

def get_polban_rank(cell):
    """get_polban_rank takes a BeautifulSoup object containing a <td> cell from
    Codeforces leaderboard and returns the user's rank across Polban users."""
    if not is_active(cell):
        return None

    res = findall(r'\d+', cell.get_text().strip())
    assert len(res) == 2

    return int(res[0])

result = []

headers = {
    "User-Agent": "cp-leaderboard (https://github.com/jtkencode/cp-leaderboard)"
}

req = requests.get(URL, headers, timeout=10)

soup = BeautifulSoup(req.content, "html.parser")
leaderboard_rows = soup.select(".ratingsDatatable tr")

# At October 17, 2020, the rating page lists 6 members, so this should be the
# baseline. (+1 for the heading row)
assert len(leaderboard_rows) >= 6 + 1

# But, due to Codeforces not closing <tr> tags properly, we only need to parse
# the "second" row ...
row = leaderboard_rows[1]
columns = row.find_all("td")

# ... and assert for a minimum of 6 members x 4 columns = 24 columns.
assert len(columns) >= (4 * 6)
assert len(columns) % 4 == 0

for i in range(0, len(columns), 4):
    entry = {
        "active": is_active(columns[i]),
        "polban_rank": get_polban_rank(columns[i]),
        "username": columns[i + 1].get_text().strip(),
        "participations": int(columns[i + 2].get_text().strip()),
        "rating": int(columns[i + 3].get_text().strip())
    }

    result.append(entry)

# Make the result stable by sorting it based on username as it cannot be changed
result = sorted(result, key=lambda item: item["username"])

print(json.dumps(result, indent=4, sort_keys=True))
